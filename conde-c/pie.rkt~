#lang racket

(require "helpers.rkt"
         "typechecker.rkt"
         "NbE.rkt"
         "mk.rkt")
;; A main program, with defines and check-same
(provide pie)

(defrel (run-pie Γ prog o)
  (conde
    [(fresh (a d)
       (== prog `(,a . ,d))
       (conde
         [(fresh (name τ def τₒ defₒ Γ^ τ-v v)
            (== a `(claim/define ,name ,τ ,def))
            (free-in-Γ name Γ)
            (type Γ τ τₒ)
            (check Γ def τₒ defₒ)
            (valofo Γ τₒ τ-v)
            (valofo Γ defₒ v)
            (extend-env Γ name v τ-v Γ^)
            (run-pie Γ^ d o))]
         [(fresh (τ e1 e2 τₒ e1ₒ e2ₒ)
            (== a `(check-same ,τ ,e1 ,e2))
            (type Γ τ τₒ)
            (check Γ e1 τₒ e1ₒ)
            (check Γ e2 τ e2ₒ)
            (≡ Γ τₒ e1ₒ e2ₒ)
            (run-pie Γ d o))]
         [(fresh (res o^)
            (conde
              [(symbolo a)]
              [(fresh (a1 d1)
                 (== a `(,a1 . ,d1))
                 (=/= a1 'check-same)
                 (=/= a1 'define))])
            (synth Γ a res)
            (== o `(,res . ,o^))
            (run-pie Γ d o^))]))]
    [(== prog '()) (== o '())]))

(defrel (pie p o)
  (run-pie '() p o))


#;
(time
 (run 1 (+₁)
     (pie `((claim/define plus
              (Π ([n Nat])
                 (Π ([m Nat])
                    Nat))
              (λ (n)
                (λ (m)
                  (ind-Nat n
                           (λ (z) Nat)
                           ,+₁
                           (λ (n-1) (λ (res) (add1 res))))))))
          '())))

#;
(time
 (run 1 q
      (pie '((claim/define bar
                (Π ([n Nat]) Nat)
                (λ (x) x))
             (claim/define foo
               (Π ([x Nat])
                  (= Nat (bar x) (bar x)))
               (λ (x) (same (bar x)))))
           q)))

#;
(time
 (run 1 q
      (pie '((claim/define foo
               (Π ([x Nat])
                  (= Nat x x))
               (λ (x) (same x)))
             (foo zero))
           q)))
#;
(time
 (run 1 q
      (normalizo '((free x Nat) (def plus (λ (n) (λ (m) (ind-Nat n (λ (z) Nat) n (λ (n-1) (λ (res) (add1 res)))))) (Π ((n Nat)) (Π ((m Nat)) Nat))))
                 '((λ (n) (λ (m) (ind-Nat n (λ (z) Nat) n (λ (n-1) (λ (res) (add1 res)))))) zero)
                 q)))


#;
(time
 (run 1 (x Arg R f)
      (synth '((free x Nat) (def plus (λ (n) (λ (m) (ind-Nat n (λ (z) Nat) n (λ (n-1) (λ (res) (add1 res)))))) (Π ((n Nat)) (Π ((m Nat)) Nat))))
             '(plus zero)
             
             `(the (Π ([,x ,Arg]) ,R) ,f))))
#;
(run 1 (t m b)
     (pie `((claim/define plus
              (Π ([n Nat])
                    (Π ([m Nat])
                       Nat))
              (λ (n)
                (λ (m)
                  (ind-Nat ,t
                           ,m
                           m
                           (λ (n-1) (λ (res) (add1 res)))))))
            ((plus (add1 zero)) (add1 zero))
            ((plus zero) (add1 (add1 (add1 zero)))))
          '((the Nat (add1 (add1 zero)))
            (the Nat (add1 (add1 (add1 zero)))))))
#;
(time
 (run 1 (m b s)
      (pie `((claim/define
              foo
              (Π ([n Nat])
                 Nat)
              (λ (n)
                (ind-Nat n
                         (λ (n) Nat)
                         zero
                         (λ (_) (λ (n) (add1 n))))))
             (claim/define
              foo2
              (Π ([n Nat])
                 (Π ([_ (= Nat n (foo n))])
                    (= Nat (add1 n) (foo (add1 n)))))
              (λ (n)
                (λ (IH)
                  (ind-= IH
                         (λ (n₂)
                           (λ (_)
                             (= Nat (add1 n)
                                (add1 n₂))))
                         (same (add1 n))))))
             (claim/define
              foo-=
              (Π ([n Nat])
                  (= Nat n (foo n)))
              (λ (n)
                (ind-Nat n
                         (λ (n) (= Nat n (foo n)))
                         (same zero)
                         foo2))))
           '())))

#;
(time
 (run 1 q
      (pie '((claim/define
              bar
              (Π ([n Nat])
                 (= Nat n n))
              (λ (f) (same f)))
             (claim/define
              bar2
              (Π ([z Nat])
                 (= (= Nat z z) (bar z) (bar z)))
              (λ (n)
                (ind-Nat n
                         (λ (y) (= (= Nat y y) (bar y) (bar y)))
                         (same (bar zero))
                         (λ (q) (λ (_) (same (bar (add1 q))))))))
             (claim/define
              foo
              (Π ([e Nat]) Atom)
              (λ (n) (ind-= (bar2 n)
                            (λ (a) (λ (b) Atom))
                            'hello))))
           q)))
#;
(time
 (run 1 (t b m s)
     (pie `((claim/define plus
              (Π ([n Nat])
                 (Π ([m Nat])
                    Nat))
              (λ (n)
                (λ (m)
                  (ind-Nat n
                           (λ (n) Nat)
                           m
                           (λ (n-1) (λ (res) (add1 ,s)))))))
            (claim/define +-zero-l
                (Π ([x Nat])
                   (= Nat x ((plus zero) x)))
                (λ (n) (same n)))
            (claim/define +-zero-r
                (Π ([x Nat])
                   (= Nat x ((plus x) zero)))
                (λ (x)
                  (ind-Nat x
                           (λ (n) (= Nat n ((plus n) zero)))
                           (same zero)
                           (λ (n-1)
                             (λ (IH)
                               (ind-= IH
                                      (λ (?)
                                        (λ (_)
                                          (= Nat (add1 n-1)
                                             (add1 ?))))
                                      (same (add1 n-1)))))))))
                            
                '())))
#;
(run 1 q
     (check '((def foo2 (LAM d (CLOS ((def foo (LAM z (CLOS () z (ind-Nat z (λ (n) Nat) (the Nat zero) (λ (n) (λ (r) (add1 r)))))) (PI n NAT (CLOS () n Nat)))) d (λ (IH) (ind-= IH (λ (?) (λ (_) (= Nat (add1 d) (add1 ?)))) (same (add1 d)))))) (PI h NAT (CLOS ((def foo (LAM z (CLOS () z (ind-Nat z (λ (n) Nat) (the Nat zero) (λ (n) (λ (r) (add1 r)))))) (PI n NAT (CLOS () n Nat)))) h (Π ((p (= Nat h (ind-Nat h (λ (n) Nat) (the Nat zero) (λ (n) (λ (r) (add1 r))))))) (= Nat (add1 h) (add1 (ind-Nat h (λ (n) Nat) (the Nat zero) (λ (n) (λ (r) (add1 r)))))))))) (def foo (LAM z (CLOS () z (ind-Nat z (λ (n) Nat) (the Nat zero) (λ (n) (λ (r) (add1 r)))))) (PI n NAT (CLOS () n Nat))))
            '(λ (n) (ind-Nat n (λ (m) (= Nat m (foo m))) (same zero) foo2))
            '(Π ((i Nat)) (= Nat i (ind-Nat i (λ (n) Nat) (the Nat zero) (λ (n) (λ (r) (add1 r))))))
q))
#;
(run 1 q
     (check '((free n NAT) (def foo2 (LAM d (CLOS ((def foo (LAM z (CLOS () z (ind-Nat z (λ (n) Nat) (the Nat zero) (λ (n) (λ (r) (add1 r)))))) (PI n NAT (CLOS () n Nat)))) d (λ (IH) (ind-= IH (λ (?) (λ (_) (= Nat (add1 d) (add1 ?)))) (same (add1 d)))))) (PI h NAT (CLOS ((def foo (LAM z (CLOS () z (ind-Nat z (λ (n) Nat) (the Nat zero) (λ (n) (λ (r) (add1 r)))))) (PI n NAT (CLOS () n Nat)))) h (Π ((p (= Nat h (ind-Nat h (λ (n) Nat) (the Nat zero) (λ (n) (λ (r) (add1 r))))))) (= Nat (add1 h) (add1 (ind-Nat h (λ (n) Nat) (the Nat zero) (λ (n) (λ (r) (add1 r)))))))))) (def foo (LAM z (CLOS () z (ind-Nat z (λ (n) Nat) (the Nat zero) (λ (n) (λ (r) (add1 r)))))) (PI n NAT (CLOS () n Nat))))
            'foo2
            '(Π ((k Nat)) (Π ((_ (= Nat k (ind-Nat k (λ (var) Nat) (the Nat zero) (λ (var) (λ (r) (add1 r))))))) (= Nat (add1 k) (add1 (ind-Nat k (λ (var) Nat) (the Nat zero) (λ (var) (λ (r) (add1 r))))))))
            q))
#;
(run 1 q
     (synth '((free n Nat))
            '(the (Π ((_ (Σ ((m Nat)) (= Nat zero m))))
                        (Σ ((m Nat)) (= Nat (add1 zero) m)))
                  (λ (IH)
                      (cons (add1 (car IH))
                            (ind-= (cdr IH)
                                   (λ (?)
                                     (λ (_)
                                       (= Nat (add1 zero) (add1 ?))))
                                   (same (add1 zero))))))
            
            q))
#;
(run 1 q
     (synth '()
            '(ind-= (the (= Nat (add1 zero) (add1 zero))
                         (same (add1 zero)))
                    (λ (?) (λ (_) (= Nat (add1 ?) (add1 ?))))
                    (the (= Nat (add1 (add1 zero)) (add1 (add1 zero)))
                         (same (add1 (add1 zero)))))
            q))
#;
(run 1 q
     (synth '((def +
                (λ (n)
                  (λ (m)
                    (ind-Nat n
                             (λ (z) Nat)
                             m
                             (λ (n-1) (λ (res) (add1 res))))))
                (Π ([n Nat])
                   (Π ([m Nat])
                      Nat))))
            '(the
              (Π ([n Nat])
                 (= Nat n ((+ n) zero)))
              (λ (n)
                (ind-Nat n
                         (λ (n) (= Nat n ((+ n) zero)))
                         (same zero)
                         (λ (n-1)
                           (λ (IH)
                             (ind-= IH
                                    (λ (?) (λ (_) (= Nat (add1 n-1) (add1 ?))))
                                    (same (add1 n-1))))))))
            q))
#;
(run 1 q
     (run-pie
      '((def +
          (λ (n)
            (λ (m)
              (ind-Nat n
                       (λ (z) Nat)
                       m
                       (λ (n-1) (λ (res) (add1 res))))))
          (Π ([n Nat])
             (Π ([m Nat])
                Nat))))
      '((claim/define +-zero-r
         (Π ([n Nat])
            (= Nat n ((+ n) zero)))
         (λ (n)
           (ind-Nat n
                    (λ (q) (= Nat q ((+ q) zero)))
                    (same zero)
                    (λ (n-1)
                      (λ (IH)
                        (ind-= IH
                               (λ (?) (λ (_) (= Nat (add1 n-1) (add1 ?))))
                               (same (add1 n-1)))))))))
            q))


;;;; Finding the base by providing a proof of left-identity
#;
(run 1 (+₁)
     (run-pie '()
              `((claim/define +
                  (Π ([n Nat])
                     (Π ([m Nat])
                        Nat))
                  (λ (n)
                    (λ (m)
                      (ind-Nat n
                               (λ (z) Nat)
                               ,+₁
                               (λ (n-1) (λ (res) (add1 res)))))))
                (claim/define +-zero-l
                  (Π ([n Nat])
                     (= Nat n ((+ zero) n)))
                  (λ (n) (same n))))
              '()))

;;; Finding the step by providing a proof of right identity
#;
(time
(run 1 (b)
     (run-pie '()
              `((claim/define +
                  (Π ([n Nat])
                     (Π ([m Nat])
                        Nat))
                  (λ (n)
                    (λ (m)
                      (ind-Nat n
                               (λ (z) Nat)
                               m
                               (λ (n-1) (λ (res) (add1 res)))))))
                (claim/define +-zero-l
                  (Π ([n Nat])
                     (= Nat n ((+ zero) n)))
                  (λ (n) (same n)))
                (claim/define +-zero-r
                  (Π ([n Nat])
                     (= Nat n ((+ n) zero)))
                  (λ (m)
                    (ind-Nat m
                             (λ (n) (= Nat n ((+ n) zero)))
                             (same zero)
                             (λ (n-1)
                               (λ (IH)
                                 (ind-= IH
                                        (λ (?) (λ (_) (= Nat (add1 n-1) (add1 ?))))
                                        (same (add1 n-1)))))))))
              '())))

#;
(run 1 (q)
     (pie `((ind-Nat (add1 zero)
                     (λ (z) Nat)
                     (add1 zero)
                     (λ (n-1) (λ (res) (add1 res)))))
          q))

#;
(run 1 (+₁)
     (run-pie '()
              `((claim/define +
                  (Π ([n Nat])
                     (Π ([m Nat])
                        Nat))
                  (λ (n)
                    (λ (m)
                      (ind-Nat n
                               (λ (z) Nat)
                               m
                               (λ (n-1) (λ (res) (add1 res)))))))
                (claim/define +-zero-l
                  (Π ([n Nat])
                     (= Nat n ((+ zero) n)))
                  (λ (n) (same n))))
              '()))

#;(time
(run 1 motive
     (pie
      `((define +
          (Π ([n Nat])
             (Π ([m Nat])
                Nat))
          (λ (n)
            (λ (m)
              (ind-Nat n
                       ,motive
                       m
                       (λ (n-1) (λ (res) (add1 res))))))))
      '(success))))

#;
(run 1 motive
     (pie
      `((the
          (Π ([n Nat])
             (Π ([m Nat])
                Nat))
          (λ (n)
            (λ (m)
              (ind-Nat n
                       (λ (n) Nat)
                       m
                       (λ (n-1) (λ (res) (add1 res))))))))
            '()))
          #;               
(run 1 (+₁)
     (run-pie '()
              `((claim/define +
                  (Π ([n Nat])
                     (Π ([m Nat])
                        Nat))
                  (λ (n)
                    (λ (m)
                      (ind-Nat n
                               (λ (z) Nat)
                               m
                               (λ (n-1) (λ (res) (add1 res)))))))
                (claim/define +-zero-r
                  (Π ([n Nat])
                     (= Nat n ((+ n) zero)))
                  (λ (n)
                    (ind-Nat n
                             (λ (n) (= Nat n ((+ n) zero)))
                             (same zero)
                             (λ (n-1)
                               (λ (IH)
                                 (ind-= IH
                                        ,+₁ #;(λ (?) (λ (_) (= Nat (add1 n-1) (add1 ?))))
                                        (same (add1 n-1)))))))))
              '()))

#;
(time
 (run 1 (+₁)
     (pie `((claim/define plus
              (Π ([n Nat])
                 (Π ([m Nat])
                    Nat))
              (λ (n)
                (λ (m)
                  (ind-Nat n
                           (λ (z) Nat)
                           ,+₁
                           (λ (n-1) (λ (res) (add1 res)))))))
            ((plus zero) zero)
            ((plus (add1 zero)) zero)
            #;((plus (add1 zero)) (add1 zero)))
          '((the Nat zero)
            (the Nat (add1 zero))
            #;(the Nat (add1 (add1 zero)))))))

#;
(run 1 q
     (pie '((claim/define plus
                          (Π ([n Nat])
                             (Π ([m Nat]) Nat))
                          (λ (n)
                            (λ (m)
                              (ind-Nat n
                                       (λ (n) Nat)
                                       m
                                       (λ (n) (λ (res) (add1 res)))))))
            ((plus zero) (add1 (add1 zero))))
          q))

#;
(run 1 q
     (pie '((claim/define foo
                   (Π ([n Nat])
                      (Σ ([a Atom]) (= Nat (add1 n) (add1 n))))
                   (λ (n)
                     (cons 'foo
                           (ind-= (the (= Nat n n) (same n))
                                  (λ (?)
                                    (λ (_)
                                      (= Nat (add1 n)
                                         (add1 ?))))
                                  (same (add1 n))))))
            (foo zero))
          q))

#;
(run 1 q
     (pie '(((the (Π ([n Nat])
                    (Σ ([a Atom]) (= Nat (add1 n) (add1 n))))
                    (λ (n)
                      (cons 'foo
                            (ind-= (the (= Nat n n) (same n))
                                   (λ (?)
                                     (λ (_)
                                       (= Nat (add1 n)
                                          (add1 ?))))
                                   (same (add1 n))))))
             zero))
          q))



#;
(run 1 q
     (pie '((the
             (Π ([n Nat])
                (Σ ([m Nat])
                   (= Nat n m)))
              (λ (n)
                (ind-Nat n
                         (λ (n) (Σ ([m Nat]) (= Nat n m)))
                         (cons zero (same zero))
                         (λ (n-1)
                           (λ (IH)
                             (cons (add1 (car IH))
                                   (ind-= (cdr IH)
                                          (λ (?)
                                            (λ (_)
                                              (= Nat (add1 n-1)
                                                 (add1 ?))))
                                          (same (add1 n-1))))))))))
          q))

#;
(time
(run 1 q
     (pie '((ind-Nat (add1 zero)
                     (λ (n) (Σ ([m Nat]) (= Nat n m)))
                     (cons zero (same zero))
                     (λ (n-1)
                       (λ (IH)
                         (cons (add1 (car IH))
                               (ind-= (cdr IH)
                                      (λ (?)
                                        (λ (_)
                                          (= Nat (add1 n-1)
                                             (add1 ?))))
                                      (same (add1 n-1)))))))) q)))

#;
(run 1 q
     (synth '((free n NAT))
            '(ind-Nat n
                      (λ (n) (= Nat n n))
                      (same zero)
                      (λ (n) (λ (m) (same (add1 n)))))
            q))

                     
