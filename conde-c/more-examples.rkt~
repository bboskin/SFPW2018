#lang racket

(require "mk.rkt"
         "pie.rkt")


#|
examples.rkt﻿> 
cpu time: 89317 real time: 89172 gc time: 37200 -- condp
'((_0))
more-examples.rkt﻿> 
cpu time: 611420 real time: 611216 gc time: 317563 -- conde + diseq
'((_0))


Add to intro and section 2 notes about how disequality constraints are similar but different.

Add section explaining the difference

Add new test programs w/ chart

Dijkstra's guarded commands
Hubert Cumon disequality constraints

|#
(time 
 (run 1 (type)
      (pie `((claim/define +
                           ,type #;
                           (Π ([n Nat])
                              (Π ([m Nat])
                                 Nat))
                           (λ (n)
                             (λ (m)
                               (ind-Nat n
                                        (λ (z) Nat)
                                        m
                                        (λ (n-1) (λ (res) (add1 res)))))))
             #;
             (claim/define +-zero-r
                           (Π ([n Nat])
                              (= Nat n
                                 ((+ n) zero)))
                           (λ (n)
                             (ind-Nat n
                                      (λ (n) (= Nat n ((+ n) zero)))
                                      (same zero)
                                      (λ (n-1)
                                        (λ (IH)
                                          (ind-= IH
                                                 (λ (?) (λ (_) (= Nat (add1 n-1) (add1 ?))))
                                                 (same (add1 n-1)))))))))
              '())))



(time 
 (run 1 (fun)
      (pie `((claim/define +
                           (Π ([n Nat])
                              (Π ([m Nat])
                                 Nat))
                           (λ (n)
                             (λ (m)
                               ,fun
                               #;
                               (ind-Nat n
                                        (λ (z) Nat)
                                        m
                                        (λ (n-1) (λ (res) (add1 res)))))))
             
             (claim/define +-zero-r
                           (Π ([n Nat])
                              (= Nat n
                                 ((+ n) zero)))
                           (λ (n)
                             (ind-Nat n
                                      (λ (n) (= Nat n ((+ n) zero)))
                                      (same zero)
                                      (λ (n-1)
                                        (λ (IH)
                                          (ind-= IH
                                                 (λ (?) (λ (_) (= Nat (add1 n-1) (add1 ?))))
                                                 (same (add1 n-1)))))))))
              '())))
