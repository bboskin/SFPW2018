#lang racket

(require "mk.rkt"
         "helpers.rkt"
         "substitution.rkt"
         "NbE.rkt"
         "tables.rkt")

(provide synth
         check
         type
         ≡-type
         ≡)


(defrel (synth Γ exp o)
  (gather
   (inspect exp synth-exp-table in-mode)
   (inspect o synth-out-table)
   (condp
     ;; Hypothesis
     ['var
      (not-reserved-symbol exp)
      (fresh (τ-v τ v)
        (apply-Γ Γ exp τ-v)
        (read-back-typo Γ τ-v τ)
        (conde
          [(fresh (v v-v)
             (apply-ρ Γ exp v-v)
             (read-backo Γ τ-v v-v v)
             (== o `(the ,τ ,v)))]
          [(free-in-ρ exp Γ)
           (== o `(the ,τ ,exp))]))]
     ;; The
     ['the
      (fresh (τ e τo eo)
        (== exp `(the ,τ ,e))
        (== o `(the ,τo ,eo))
        (type Γ τ τo)
        (check Γ e τo eo))]
     ;;UI-1
     ['Atom
      (== exp 'Atom)
      (== o '(the U Atom))]
     ;; AtomI-tick
     ['quote
      (fresh (s)
        (== exp `(quote ,s))
        (symbolo s)
        (== o `(the Atom (quote ,s))))]
     ;;UI-9
     ['Nat
      (== exp 'Nat)
      (== o '(the U Nat))]
     ;;NatI-1
     ['zero
      (== exp 'zero)
      (== o '(the Nat zero))]
     ;;NatI-2
     ['add1
      (fresh (n no)
        (== exp `(add1 ,n))
        (== o `(the Nat (add1 ,no)))
        (check Γ n 'Nat no))]
     ;;NatE-4
     ['ind-Nat
      (fresh (t m b s to mo bo so τb vars k τk1 τk2 τf τf-v norm ρ)
        (== exp `(ind-Nat ,t ,m ,b ,s))
        (== o `(the ,τf ,norm))
        (check Γ t 'Nat to)
        (check Γ m '(Π ([_ Nat]) U) mo)
        (normalizo Γ 'UNIVERSE `(,mo zero) τb)
        (check Γ b τb bo)
        (just-names Γ vars)
        (freshen 'k vars k)
        (extend-ρ Γ k `(NEU NAT (VAR ,k)) ρ)
        (normalizo ρ 'UNIVERSE `(,mo ,k) τk1)
        (normalizo ρ 'UNIVERSE `(,mo (add1 ,k)) τk2)
        (check Γ s `(Π ([,k Nat]) (Π ([_ ,τk1]) ,τk2)) so)
        (valofo Γ `(,mo ,to) τf-v)
        (read-back-typo Γ τf-v τf)
        (normalizo Γ τf-v `(ind-Nat ,to ,mo (the ,τb ,bo) ,so) norm))]
     ;;UI-14
     ['Trivial
      (== exp 'Trivial)
      (== o `(the U Trivial))]
     ;; TrivI
     ['sole
      (== exp 'sole)
      (== o `(the Trivial sole))]
     ;;UI-2
     ['Σ
      (fresh (x A D Ao Γ^ Do Ao-v)
        (== exp `(Σ ([,x ,A]) ,D))
        (not-reserved-symbol x)
        (== o `(the U (Σ ([,x ,Ao]) ,Do)))
        (check Γ A 'U Ao)
        (valofo Γ Ao Ao-v)
        (extend-Γ Γ x Ao-v Γ^)
        (check Γ^ D 'U Do))]
     ;;ΣE-1
     ['car
      (fresh (pr x A D prₒ norm τ-A)
        (== exp `(car ,pr))
        (== o `(the ,A ,norm))
        (synth Γ pr `(the (Σ ([,x ,A]) ,D) ,prₒ))
        (valofo Γ A τ-A)
        (normalizo Γ τ-A `(car ,prₒ) norm))]
     ;;ΣE-2
     ['cdr
      (fresh (pr x A D prₒ D^ norm a τ-A D-v)
        (== exp `(cdr ,pr))
        (== o `(the ,D^ ,norm))
        (synth Γ pr `(the (Σ ([,x ,A]) ,D) ,prₒ))
        (valofo Γ A τ-A)
        (normalizo Γ τ-A `(car ,prₒ) a)
        (substo x a D D^)
        (valofo Γ D^ D-v)
        (normalizo Γ D-v `(cdr ,prₒ) norm))]
     ;;UI-5
     ['Π
      (fresh (x A R Aₒ Γ^ Rₒ Aₒ-v)
        (== exp `(Π ([,x ,A]) ,R))
        (not-reserved-symbol x)
        (== o `(the U (Π ([,x ,Aₒ]) ,Rₒ)))
        (check Γ A 'U Aₒ)
        (valofo Γ Aₒ Aₒ-v)
        (extend-Γ Γ x Aₒ-v Γ^)
        (check Γ^ R 'U Rₒ))]
     ;;UI-12
     ['=
      (fresh (X from to Xₒ fromₒ toₒ)
        (== exp `(= ,X ,from ,to))
        (== o `(the U (= ,Xₒ ,fromₒ ,toₒ)))
        (check Γ X 'U Xₒ)
        (check Γ from Xₒ fromₒ)
        (check Γ to Xₒ toₒ))]
     ;;EQE-5
     ['ind-=
      (fresh (t m b τ-norm τ-norm-v norm X from to tₒ mo bo vars x1 x2 τb)
        (== exp `(ind-= ,t ,m ,b))
        (== o `(the ,τ-norm ,norm))
        (synth Γ t `(the (= ,X ,from ,to) ,tₒ))
        (just-names Γ vars)
        (freshen 'x1 vars x1)
        (freshen 'x2 vars x2)
        (check Γ m `(Π ([,x1 ,X]) (Π ([,x2 (= ,X ,from ,x1)]) U)) mo)
        (normalizo Γ 'UNIVERSE `((,mo ,from) (same ,from)) τb)
        (check Γ b τb bo)
        (valofo Γ `((,mo ,to) ,tₒ) τ-norm-v)
        (read-back-typo Γ τ-norm-v τ-norm)
        (normalizo Γ τ-norm-v `(ind-= ,tₒ ,mo ,bo) norm))]
     ;; Application (get real name later)
     ['app
      (fresh (f arg x Arg R fₒ argₒ Rₒ Rₒ-v norm)
        (== exp `(,f ,arg))
        (== o `(the ,Rₒ ,norm))
        (not-reserved-fn f)
        (not-reserved-symbol x)
        (synth Γ f `(the (Π ([,x ,Arg]) ,R) ,fₒ))
        (check Γ arg Arg argₒ)
        (substo x argₒ R Rₒ)
        (valofo Γ Rₒ Rₒ-v)
        (normalizo Γ Rₒ-v `(,fₒ ,argₒ) norm))])))

(defrel (use-switch exp)
  (conde
    [(symbolo exp)]
    [(fresh (a d)
       (== exp `(,a . ,d))
       (=/= a 'same)
       (=/= a 'λ)
       (=/= a 'cons))]))

(defrel (check-cons Γ exp τ o)
  (fresh (a d x A D aₒ Dₒ dₒ)
    (== exp `(cons ,a ,d))
    (== τ `(Σ ([,x ,A]) ,D))
    (not-reserved-symbol x)
    (== o `(cons ,aₒ ,dₒ))
    (check Γ a A aₒ)
    (substo x aₒ D Dₒ)
    (check Γ d Dₒ dₒ)))

(defrel (check-λ Γ exp τ o)
  (fresh (x r y Arg R R^ Γ^ rₒ Argᵥ)
    (== exp `(λ (,x) ,r))
    (not-reserved-symbol x)
    (== τ `(Π ([,y ,Arg]) ,R))
    (not-reserved-symbol y)
    (== o `(λ (,x) ,rₒ))
    (substo y x R R^)
    (valofo Γ Arg Argᵥ)
    (extend-Γ Γ x Argᵥ Γ^)
    (check Γ^ r R^ rₒ)))

(defrel (check-= Γ exp τ o)
  (fresh (X from to mid midₒ)
    (== exp `(same ,mid))
    (== τ `(= ,X ,from ,to))
    (== o `(same ,midₒ))
    (check Γ mid X midₒ)
    (≡ Γ X from midₒ)
    (≡ Γ X midₒ to)))

(defrel (switch1 Γ exp τ o)
  (fresh (t)
    (use-switch exp)
    (synth Γ exp `(the ,t ,o))
    (≡-type Γ τ t)))

(defrel (switch2 Γ exp τ o)
  (fresh (t)
    (use-switch exp)
    (≡-type Γ τ t)
    (synth Γ exp `(the ,t ,o))))

(defrel (check Γ exp τ o)
  (gather
   (inspect (cons τ o) check-out-table)
   (inspect exp check-exp-table in-mode)
   (condp
    ;;ΣI
    ['cons (check-cons Γ exp τ o)]
    ;;FunI-1
    ['λ (check-λ Γ exp τ o)]
    ;; EqI
    ['same (check-= Γ exp τ o)]
    ;; Switch
    ['switch1 (switch1 Γ exp τ o)]
    ['switch2 (switch2 Γ exp τ o)])))


(defrel (type Γ τ o)
  (gather
   (inspect τ type-table in-mode)
   (condp
     ;;UF
     ['U (== τ 'U) (== o 'U)]
     ;;NatF
     ['Nat (== τ 'Nat) (== o 'Nat)]
     ;;AtomF
     ['Atom (== τ 'Atom) (== o 'Atom)]
     ;;TrivialF
     ['Trivial (== τ 'Trivial) (== o 'Trivial)]
     ;;FunF-1
     ['Π
      (fresh (x Arg R Argo Ro Γ^ Argoᵥ)
        (== τ `(Π ([,x ,Arg]) ,R))
        (== o `(Π ([,x ,Argo]) ,Ro))
        (type Γ Arg Argo)
        (valofo Γ Argo Argoᵥ)
        (extend-Γ Γ x Argoᵥ Γ^)
        (type Γ^ R Ro))]
     ;;ΣF-1
     ['Σ
      (fresh (x A D Ao Aoᵥ Do Γ^)
        (== τ `(Σ ([,x ,A]) ,D))
        (== o `(Σ ([,x ,Ao]) ,Do))
        (type Γ A Ao)
        (valofo Γ Ao Aoᵥ)
        (extend-Γ Γ x Aoᵥ Γ^)
        (type Γ^ D Do))]
     ;;EQF
     ['=
      (fresh (X from to Xo fromo too)
        (== τ `(= ,X ,from ,to))
        (== o `(= ,Xo ,fromo ,too))
        (type Γ X Xo)
        (check Γ from Xo fromo)
        (check Γ to Xo too))]
     ;; EL
     ['switch (check Γ τ 'U o)])))

(defrel (≡-type Γ e1 e2)
  (gather
   (inspect e1 ≡-type-table in-mode)
   (inspect e2 ≡-type-table in-mode)
   (condp
    ;; USame-U
    ['U (== e1 'U) (== e2 'U)]
    ;;NatSame-Nat
    ['Nat (== e1 'Nat) (== e2 'Nat)]
    ;;AtomSame-Atom
    ['Atom (== e1 'Atom) (== e2 'Atom)]
    ;;TrivialSame-Trivial
    ['Trivial (== e1 'Trivial) (== e2 'Trivial)]
    ;;ΣSame-Σ
    ['Σ
     (fresh (x A1 D1 y A2 D2 D2^ Γ^ Aᵥ)
       (== e1 `(Σ ([,x ,A1]) ,D1))
       (== e2 `(Σ ([,y ,A2]) ,D2))
       (≡-type Γ A1 A2)
       (valofo Γ A1 Aᵥ)
       (extend-Γ Γ x Aᵥ Γ^)
       (substo y x D2 D2^)
       (≡-type Γ^ D1 D2^))]
    ;;FunSame-Π
    ['Π
     (fresh (x A1 D1 y A2 D2 D2^ Γ^ Aᵥ)
       (== e1 `(Π ([,x ,A1]) ,D1))
       (== e2 `(Π ([,y ,A2]) ,D2))
       (≡-type Γ A1 A2)
       (valofo Γ A1 Aᵥ)
       (extend-Γ Γ x Aᵥ Γ^)
       (substo y x D2 D2^)
       (≡-type Γ^ D1 D2^))]
    ;;EQSame-EQ
    ['=
     (fresh (X1 from1 to1 X2 from2 to2)
       (== e1 `(= ,X1 ,from1 ,to1))
       (== e2 `(= ,X2 ,from2 ,to2))
       (≡-type Γ X1 X2)
       (≡ Γ X1 from1 from2)
       (≡ Γ X1 to1 to2))]
    ;; EL-Same
    ['switch
     (≡ Γ 'U e1 e2)])))

(defrel (≡ Γ τ e1 e2)
  (gather
   (inspect e1 ≡-table/e in-mode)
   (inspect e2 ≡-table/e in-mode)
   (inspect τ ≡-table/τ)
   (condp
    ;; Hypothesis-Same
    ['var
     (== e1 e2)
     (symbolo e1)
     (fresh (v)
       (apply-Γ Γ e1 v)
       (read-back-typo Γ v τ))]
    ;; The
    ['the
     (fresh (t1 b1)
       (== e1 `(the ,t1 ,b1))
       (≡-type Γ τ t1)
       (≡ Γ τ e2 b1))]
    ;;USame-Trivial
    ['Trivial (== e1 'Trivial) (== e2 'Trivial) (== τ 'U)]
    ;; TrivSame-η
    ['sole
     (== τ 'Trivial)
     (== e2 'sole)
     (≡ Γ 'Trivial e1 e1)]
    ;; USame-Atom
    ['Atom (== e1 'Atom) (== e2 'Atom) (== τ 'U)]
    ;; AtomSame-tick
    ['quote (fresh (s)
       (== e1 `(quote ,s))
       (== e2 `(quote ,s))
       (== τ 'Atom))]
    ;; USame-Σ
    ['Σ
     (fresh (x A1 D1 y A2 D2 D2^ Γ^ Aᵥ)
       (== e1 `(Σ ([,x ,A1]) ,D1))
       (== e2 `(Σ ([,y ,A2]) ,D2))
       (== τ 'U)
       (≡ Γ 'U A1 A2)
       (valofo Γ A1 Aᵥ)
       (extend-Γ Γ x Aᵥ Γ^)
       (≡ Γ^ 'U D1 D2^)
       (substo y x D2 D2^))]
    ;; ΣSame-cons
    ['cons
     (fresh (a1 d1 a2 d2 x A D D^)
       (== e1 `(cons ,a1 ,d1))
       (== e2 `(cons ,a2 ,d2))
       (== τ `(Σ ([,x ,A]) ,D))
       (≡ Γ A a1 a2)
       (substo x a1 D D^)
       (≡ Γ D^ d1 d2))]
    ;; ΣSame-car
    ['car
     (fresh (pr1 pr2 x D)
       (== e1 `(car ,pr1))
       (== e2 `(car ,pr2))
       (≡ Γ `(Σ ([,x ,τ]) ,D) pr1 pr2))]
    ;; ΣSame-η1
    ['Σ-η1
     (fresh (a d x D Γ^ τᵥ)
       (== e1 `(car (cons ,a ,d)))
       (≡ Γ τ a e2)
       (valofo Γ τ τᵥ)
       (extend-Γ Γ x τᵥ Γ^)
       (≡ Γ^ D d d))]
    ;; ΣSame-cdr
    ['cdr
     (fresh (pr1 pr2 a x A D A-v)
       (== e1 `(cdr ,pr1))
       (== e2 `(cdr ,pr2))
       (≡ Γ `(Σ ([,x ,A]) ,D) pr1 pr2)
       (valofo Γ A A-v)
       (normalizo Γ A-v `(car ,pr1) a)
       (substo x a D τ))]
    ;;ΣSame-η2
    ['Σ-η2
     (fresh (a1 d a2 x A Aᵥ D Γ^)
       (== e1 `(cdr (cons ,a1 ,d)))
       (≡ Γ A a1 a2)
       (valofo Γ A Aᵥ)
       (extend-Γ Γ x Aᵥ Γ^)
       (≡ Γ^ D d e2)
       (substo x a2 D τ))]
    ;;ΣSame-η
    ['Σ-η
     (fresh (pr2)
       (== e2 `(cons (car ,pr2) (cdr ,pr2)))
       (≡ Γ τ e1 pr2))]
    ;;USame-Nat
    ['Nat (== e1 'Nat) (== e2 'Nat) (== τ 'U)]
    ;;NatSame-zero
    ['zero (== e1 'zero) (== e2 'zero) (== τ 'Nat)]
    ;;NatSame-add1
    ['add1
     (fresh (n1 n2)
       (== e1 `(add1 ,n1))
       (== e2 `(add1 ,n2))
       (== τ 'Nat)
       (≡ Γ 'Nat n1 n2))]
    ;; NatSame-ind-Nat
    ['ind-Nat
     (fresh (t1 m1 b1 s1 t2 m2 b2 s2 τb vars k τ1 τ2 ρ)
       (== e1 `(ind-Nat ,t1 ,m1 ,b1 ,s1))
       (== e2 `(ind-Nat ,t2 ,m2 ,b2 ,s2))
       (normalizo Γ 'UNIVERSE `(,m1 ,t1) τ)
       (≡ Γ 'Nat t1 t2)
       (≡ Γ '(Π ([_ Nat]) U) m1 m2)
       (normalizo Γ 'UNIVERSE `(,m1 zero) τb)
       (≡ Γ τb b1 b2)
       (just-names Γ vars)
       (freshen 'k vars k)
       (extend-ρ Γ k `(NEU NAT (VAR ,k)) ρ)
       (normalizo ρ 'UNIVERSE `(,m1 ,k) τ1)
       (normalizo ρ 'UNIVERSE `(,m1 (add1 ,k)) τ2)
       (≡ Γ `(Π ([,k Nat]) (Π ([_ ,τ1]) ,τ2)) s1 s2)
       )]
    ;;NatSame-in-Nι1
    ['ind-Nat-ι1
     (fresh (m b s vars k τ1 τ2 ρ)
       (== e1 `(ind-Nat zero ,m ,b ,s))
       (normalizo Γ 'UNIVERSE `(,m zero) τ)
       (≡ Γ '(Π ([_ Nat]) U) m m)
       (≡ Γ τ b e2)
       (just-names Γ vars)
       (freshen 'k vars k)
       (extend-ρ Γ k `(NEU NAT (VAR ,k)) ρ)
       (normalizo ρ 'UNIVERSE `(,m ,k) τ1)
       (normalizo ρ 'UNIVERSE `(,m (add1 ,k)) τ2)
       (≡ Γ '(Π ([,k Nat]) (Π ([_ ,τ1]) ,τ2)) s s))]
    ;;NatSame-in-Nι2
    ['ind-Nat-ι2
     (fresh (n1 m1 b1 s1 n2 m2 b2 s2 vars k τb τ1 τ2 ρ)
       (== e1 `(ind-Nat (add1 ,n1) ,m1 ,b1 ,s1))
       (== e2 `((,s2 ,n2) (ind-Nat ,n2 ,m2 ,b2 ,s2)))
       (normalizo Γ 'UNIVERSE `(,m1 (add1 ,n1)) τ)
       (normalizo Γ 'UNIVERSE `(,m1 zero) τb)
       (≡ Γ '(Π ([_ Nat]) U) m1 m2)
       (≡ Γ τb b1 b2)
       (just-names Γ vars)
       (freshen 'k vars k)
       (extend-ρ Γ k `(NEU NAT (VAR ,k)) ρ)
       (normalizo ρ 'UNVIERSE `(,m1 ,k) τ1)
       (normalizo ρ 'UNIVERSE `(,m1 (add1 ,k)) τ2)
       (≡ Γ `(Π ([,k Nat]) (Π ([_ ,τ1]) ,τ2)) s1 s2))]
    ;; USame-Π
    ['Π
     (fresh (x A1 D1 y A2 D2 D2^ Γ^)
       (== e1 `(Π ([,x ,A1]) ,D1))
       (== e2 `(Π ([,y ,A2]) ,D2))
       (== τ 'U)
       (≡ Γ 'U A1 A2)
       (extend-Γ Γ x A1 Γ^)
       (substo y x D2 D2^)
       (≡ Γ^ 'U D1 D2^))]
    ;; FunSame-λ
    ['λ
     (fresh (x r1 y r2 z Arg Argᵥ R R^ Γ^ r2^)
       (== e1 `(λ (,x) ,r1))
       (== e2 `(λ (,y) ,r2))
       (symbolo x)
       (symbolo y)
       (== τ `(Π ([,z ,Arg]) ,R))
       (valofo Γ Arg Argᵥ)
       (extend-Γ Γ x Argᵥ Γ^)
       (substo y x r2 r2^)
       (substo z x R R^)
       (≡ Γ^ R^ r1 r2^))]
    ;;FunSame-apply
    ['app
     (fresh (f1 arg1 f2 arg2 x A R)
       (== e1 `(,f1 ,arg1))
       (== e2 `(,f2 ,arg2))
       (≡ Γ A arg1 arg2)
       (substo x arg1 R τ)
       (≡ Γ `(Π ([,x ,A]) ,R) f1 f2))]
    ;;FunSame-β
    ['Π-β
     (fresh (x r1 arg1 arg2 arg2-v r2 r2^ z y Arg R Γ^)
       (== e1 `((λ (,x) ,r1) ,arg1))
       (≡ Γ Arg arg1 arg2)
       (symbolo y)
       (substo y arg2 r2 e2)
       (substo y x r2 r2^)
       (valofo Γ arg2 arg2-v)
       (extend-Γ Γ x arg2-v Γ^)
       (≡ Γ^ R r1 r2^)
       (symbolo z)
       (substo z arg2 R τ))]
    ;;FunSame-η
    ['Π-η
     (fresh (x f2 vars y Arg R)
       (symbolo x)
       (== e2 `(λ (,x) (,f2 ,x)))
       (not-reserved-fn f2)
       (== τ `(Π ([,y ,Arg]) ,R))
       (≡ Γ τ e1 f2))]
    ;; USame-=
    ['=
     (fresh (X1 from1 to1 X2 from2 to2)
       (== e1 `(= ,X1 ,from1 ,to1))
       (== e2 `(= ,X2 ,from2 ,to2))
       (≡ Γ 'U X1 X2)
       (≡ Γ X1 from1 from2)
       (≡ Γ X1 to1 to2))]
    ;; EQSame-same
    ['same
     (fresh (from to X f t)
       (== e1 `(same ,from))
       (== e2 `(same ,to))
       (== τ `(= ,X ,f ,t))
       (≡ Γ X from f)
       (≡ Γ X from t)
       (≡ Γ X from to))]
    ;; EqSame-ind-=
    ['ind-=
     (fresh (t1 m1 b1 t2 m2 b2 X from to vars x τb)
       (== e1 `(ind-= ,t1 ,m1 ,b1))
       (== e2 `(ind-= ,t2 ,m2 ,b2))
       (≡ Γ `(= ,X ,from ,to) t1 t2)
       (normalizo Γ 'UNIVERSE `((,m1 ,to) ,t1) τ)
       (just-names Γ vars)
       (freshen 'x vars x)
       (≡ Γ `(Π ([,x ,X]) (Π ([_ (= ,X ,from ,x)]) U)) m1 m2)
       (normalizo Γ 'UNIVERSE `((,m1 ,from) (same ,from)) τb)
       (≡ Γ τb b1 b2))]
    ;; EqSame-i-=ι
    ['ind-=-ι
     (fresh (expr m b1 X vars x)
       (== e1 `(ind-= (same ,expr) ,m ,b1))
       (≡ Γ X expr expr)
       (normalizo Γ 'UNIVERSE `((,m ,expr) (same ,expr)) τ)
       (just-names Γ vars)
       (freshen 'x vars x)
       (≡ Γ `(Π ([,x ,X]) (Π ([_ (= ,X ,expr ,x)]) U)) m m)
       (≡ Γ τ b1 e2))])))


;; Tests

#;
(run 1 (n)
     (synth '() `(ind-Nat ,n
                          (λ (x) (= Nat x x))
                          (same zero)
                          (λ (n-1)
                            (λ (IH)
                              (same (add1 n-1)))))
            `(the (= Nat (add1 (add1 zero)) (add1 (add1 zero)))
                  (same (add1 (add1 zero))))))

#;
(run 1 (n ans)
     (synth '() `(ind-Nat (add1 (add1 zero))
                          (λ (x) (= Nat x x))
                          ,ans
                          (λ (n-1)
                            (λ (IH)
                              (same (add1 n-1)))))
            `(the (= Nat (add1 (add1 zero)) (add1 (add1 zero)))
                  (same (add1 (add1 zero))))))
; – failing
#;
(run 1 (ans)
     #;(synth '() `(ind-Nat (add1 zero)
                          (λ (x) Nat)
                          zero
                          ,ans)
            '(the Nat (add1 zero)))
     (synth '() `(ind-Nat (add1 (add1 zero))
                          (λ (x) Nat)
                          zero
                          ((λ (a) (λ ((add1 b)) (add1 b)))))
            '(the Nat (add1 (add1 zero)))))


#;
(run 1 (q)
     (synth '() `(the (Π ([X U])
                         (Π ([x X])
                            (= X x x)))
                      ,q)
            q))
#;
(run 1 (q)
     (synth '()
            `(the (Σ ([X U])
                     (Σ ([x X])
                        (= X x x)))
                  ,q)
            `(the (Σ ([X U])
                     (Σ ([x X])
                        (= X x x)))
                  ,q)))
#;
(run 1 q
     (synth '() '(the (Π ([x Nat])
                         Nat)
                      (λ (n)
                        (ind-Nat n
                                 (λ (n) Nat)
                                 zero
                                 (λ (n-1)
                                   (λ (res)
                                     (add1 res))))))
            q))

#;
(run 1 q
     (synth '((def +
                (LAM x
                 (CLOS
                  () x
                  (λ (y) (ind-Nat x (λ (n) Nat) (the Nat y)
                                  (λ (n-1) (λ (ans) (add1 ans)))))))
                  (PI n NAT (CLOS () n (Π ((m Nat)) Nat)))))
            '((+ (add1 zero)) (add1 zero))
            q))
#;
(run 1 q
     (synth '()
            '(the
              (Π ([n Nat])
                 (Π ([m Nat])
                    Nat))
              (λ (n)
                (λ (m)
                  (ind-Nat n
                           (λ (z) Nat)
                           m
                           (λ (n-1) (λ (res) (add1 res)))))))
            q))
#;
(run 1 (q)
     (synth '((def +
                (LAM x
                 (CLOS
                  () x
                  (λ (y) (ind-Nat x (λ (n) Nat) (the Nat y)
                                  (λ (n-1) (λ (ans) (add1 ans)))))))
                  (PI n NAT (CLOS () n (Π ((m Nat)) Nat)))))
            '(ind-= (the (= Nat zero zero) (same zero))
                   (λ (?) (λ (_) (= Nat (add1 zero) (add1 ((+ zero) zero)))))
                   (same (add1 zero)))
            q))
#; ; – failing
(run 1 q
     (synth '((def +
                (LAM x
                 (CLOS
                  () x
                  (λ (y) (ind-Nat x (λ (n) Nat) (the Nat y)
                                  (λ (n-1) (λ (ans) (add1 ans)))))))
                  (PI n NAT (CLOS () n (Π ((m Nat)) Nat)))))
            '(the
              (Π ([n Nat])
                 (= Nat n ((+ n) zero)))
              (λ (n)
                (ind-Nat n
                         (λ (n) (= Nat n ((+ n) zero)))
                         (same zero)
                         (λ (n-1)
                           (λ (IH)
                             (ind-= IH
                                    (λ (?) (λ (_) (= Nat (add1 n-1) (add1 ?))))
                                    (same (add1 n-1))))))))
            q))

#; ; – failing

(run 1 q
     (check '((free n NAT)
              (def +
                (LAM x
                 (CLOS
                  () x
                  (λ (y) (ind-Nat x (λ (n) Nat) (the Nat y)
                                  (λ (n-1) (λ (ans) (add1 ans)))))))
                  (PI n NAT (CLOS () n (Π ((m Nat)) Nat)))))
            '(λ (n-1) (λ (IH) (ind-= IH (λ (?) (λ (_) (= Nat (add1 n-1) (add1 ?))))
                                    (same (add1 n-1)))))
            '(Π ((k Nat)) (Π ((_ (= Nat k (ind-Nat k (λ (z) Nat) (the Nat zero)
                                                   (λ (n-1) (λ (res) (add1 res)))))))
                             (= Nat (add1 k) (add1 (ind-Nat k (λ (z) Nat) (the Nat zero)
                                                            (λ (n-1) (λ (res) (add1 res))))))))
            q))
#;
(run 1 q
     (synth '()
            '(cdr (the (Σ ([x Nat]) Atom)
                       (cons (add1 zero) 'hello)))
            q))
#;
(run 1 q
     (check '((free n Nat))
            '(λ (n-1)
               (λ (IH)
                 (cons (add1 (car IH))
                       (ind-= (cdr IH)
                              (λ (?)
                                (λ (_)
                                  (= Nat (add1 n-1) (add1 ?))))
                              (same (add1 n-1))))))
            '(Π ((k Nat))
                (Π ((_ (Σ ((m Nat)) (= Nat k m))))
                   (Σ ((m Nat)) (= Nat (add1 k) m))))
            q))

